{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Login","state","username","password","showdata","submit","e","preventDefault","show","_this","alert","push","_this2","this","react_default","a","createElement","MuiThemeProvider_default","AppBar_default","title","TextField_default","id","label","type","onChange","setState","target","value","margin","RaisedButton_default","buttonLabel","primary","onClick","Component","App","className","src","logo","alt","href","rel","src_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mRA0DeA,6MAhDXC,MAAM,CACFC,SAAS,GACTC,SAAS,GACTC,SAAS,MAMbC,OAAQ,SAACC,GACLA,EAAEC,iBACF,IAAIC,EAAKC,EAAKR,MACdS,MAAMD,EAAKR,MAAMC,UACjBM,EAAKJ,SAASO,KAAKH,EAAKN,mFAGpB,IAAAU,EAAAC,KACJ,OACIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACFD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACGI,MAAM,UAETL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACFM,GAAG,0BACHC,MAAM,WAENC,KAAK,WACLC,SAAU,SAAClB,GAAD,OAAKM,EAAKa,SAAS,CAACvB,SAASI,EAAEoB,OAAOC,SAChDC,OAAO,WAETd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACLM,GAAG,0BACHC,MAAM,WAENC,KAAK,WACLC,SAAU,SAAClB,GAAD,OAAKM,EAAKa,SAAS,CAACtB,SAASG,EAAEoB,OAAOC,SAChDC,OAAO,WAETd,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAcO,MAAOT,KAAKZ,MAAM6B,YAAaC,SAAS,EAAOJ,MAAM,QAAQK,QAASnB,KAAKR,UAEzFS,EAAAC,EAAAC,cAAA,WAAMH,KAAKZ,MAAMG,SAAS,YA5CN6B,aCmBLC,MAtBf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cAChBrB,EAAAC,EAAAC,cAAA,OAAKoB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCxB,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEmB,UAAU,WACVI,KAAK,sBACLb,OAAO,SACPc,IAAI,uBAJN,gBASF1B,EAAAC,EAAAC,cAACyB,EAAD,QCVcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.bbed086b.chunk.js","sourcesContent":["import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\nimport React, { Component} from 'react';\n// import Button from '@material-ui/core/Button';\n// import classes from classNames;\n\nclass Login extends Component{\n\n    state={\n        username:'',\n        password:'',\n        showdata:[],\n    }\n    // handleChange=(e) =>{\n    //     this.setState({[e.target]: })\n    // }\n\n    submit =(e) =>{\n        e.preventDefault();\n        var show=this.state;\n        alert(this.state.username);\n        show.showdata.push(show.username);\n    }\n\n    render(){\n        return(\n            <MuiThemeProvider>\n          <div>\n          <AppBar\n             title=\"Login\"\n           />\n          <TextField\n        id=\"standard-password-input\"\n        label=\"Username\"\n        // className={classes.textField}\n        type=\"username\"\n        onChange={(e)=>this.setState({username:e.target.value})}\n        margin=\"normal\"\n      />\n      <br/><TextField\n      id=\"standard-password-input\"\n      label=\"Password\"\n    //   className={classes.textField}\n      type=\"password\"\n      onChange={(e)=>this.setState({password:e.target.value})}\n      margin=\"normal\"\n    />\n    <br/>\n<RaisedButton label={this.state.buttonLabel} primary={true}  value=\"hello\" onClick={this.submit}/>\n</div>\n<div>{this.state.showdata[0]}</div>\n\n           </MuiThemeProvider>\n        )\n    }\n}\nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}